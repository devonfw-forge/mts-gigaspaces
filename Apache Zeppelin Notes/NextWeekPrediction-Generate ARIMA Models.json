{"paragraphs":[{"title":"Establish connection with the Space","text":"%python\nimport pandas as pd\nfrom pyspark.conf import SparkConf\nfrom pyspark.sql import SparkSession\nfrom pmdarima.arima import auto_arima\n\nconf = SparkConf() \nconf.setAppName(\"Next Week Prediction\")\nconf.set(\"spark.insightedge.space.name\", \"CG-space\")\nconf.set(\"spark.insightedge.space.lookup.group\", \"xap-15.5.1\")\nconf.set(\"spark.insightedge.space.lookup.locator\", \"127.0.0.1:4174\")\nspark = SparkSession.builder.config(conf=conf).getOrCreate()\n","user":"anonymous","dateUpdated":"2021-01-01T15:25:40+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python","title":true,"lineNumbers":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1607271323301_697093551","id":"20201206-171523_2017151587","dateCreated":"2020-12-06T17:15:23+0100","dateStarted":"2021-01-01T20:24:32+0100","dateFinished":"2021-01-01T20:24:32+0100","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11653"},{"title":"Get historical data of ordered dishes per day","text":"%python\nordereddishesraw = spark.read.format(\"org.apache.spark.sql.insightedge\").option(\"collection\",\"com.devonfw.application.mtsj.ordermanagement.dataaccess.api.OrderedDishesPerDayEntity\").load()\nordereddishes = ordereddishesraw[\"bookingdate\",\"amount\",\"designation\",\"temperature\",\"dishId\"].toPandas()","user":"anonymous","dateUpdated":"2021-01-01T15:25:40+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python","title":true,"lineNumbers":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1607271336232_-963221794","id":"20201206-171536_1179359622","dateCreated":"2020-12-06T17:15:36+0100","dateStarted":"2021-01-01T20:24:32+0100","dateFinished":"2021-01-01T20:24:34+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11654"},{"title":"Replace Holiday with 1 and non-holiday with 0","text":"%python\nordereddishes.loc[~ordereddishes['designation'].isnull(),'designation'] = 1  # not nan\nordereddishes['designation'] = ordereddishes['designation'].fillna(0) # nan","user":"anonymous","dateUpdated":"2021-01-01T15:25:44+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python","title":true,"lineNumbers":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1607271515399_1537769480","id":"20201206-171835_666700294","dateCreated":"2020-12-06T17:18:35+0100","dateStarted":"2021-01-01T20:24:34+0100","dateFinished":"2021-01-01T20:24:34+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11655"},{"title":"Use Booking Date as Index","text":"%python\nordereddishes['bookingdate'] = pd.to_datetime(ordereddishes['bookingdate'])\nordereddishes.index= ordereddishes['bookingdate']\nordereddishes = ordereddishes.sort_index()\n","user":"anonymous","dateUpdated":"2021-01-01T15:25:44+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python","title":true,"lineNumbers":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1607274888498_-510317062","id":"20201206-181448_1264559372","dateCreated":"2020-12-06T18:14:48+0100","dateStarted":"2021-01-01T20:24:34+0100","dateFinished":"2021-01-01T20:24:34+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11656"},{"title":"Trim the Data Set to the current Date (Test Data contains also some future values)","text":"%python\nfrom datetime import date\nordereddishes = ordereddishes[ordereddishes['bookingdate'] < str(date.today())]\nindex = pd.date_range(start=ordereddishes.index.min(), end=ordereddishes.index.max(), freq='D') #Some days have no orders, but to respect the ARIMA seasonality dates will be added. \n","user":"anonymous","dateUpdated":"2021-01-01T15:25:45+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python","title":true,"lineNumbers":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1607271620538_-70448664","id":"20201206-172020_288033327","dateCreated":"2020-12-06T17:20:20+0100","dateStarted":"2021-01-01T20:24:34+0100","dateFinished":"2021-01-01T20:24:34+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11657"},{"title":"Group the Dataset by dish","text":"%python\nn = len(pd.unique(ordereddishes['dishId'])) \ndishes = list()\nfor i in range(n):\n    dish = ordereddishes[ordereddishes['dishId'] == str(i)]\n    dishes.append(dish)\n","user":"anonymous","dateUpdated":"2021-01-01T15:25:45+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python","title":true,"lineNumbers":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1607271635770_-1695070113","id":"20201206-172035_1937889708","dateCreated":"2020-12-06T17:20:35+0100","dateStarted":"2021-01-01T20:24:34+0100","dateFinished":"2021-01-01T20:24:34+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11658"},{"title":"Get DateInfo (temperature and holiday for each date)","text":"%python\ndateinforaw = spark.read.format(\"org.apache.spark.sql.insightedge\").option(\"collection\",\"com.devonfw.application.mtsj.predictionmanagement.dataaccess.api.DateInfoEntity\").load()\ndateinfo =  dateinforaw[\"date\",\"designation\",\"temperature\"].toPandas()\ndateinfo.index= dateinfo['date']\ndateinfo = dateinfo.sort_index()\n","user":"anonymous","dateUpdated":"2021-01-01T15:25:46+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python","title":true,"lineNumbers":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1607271683971_1973752660","id":"20201206-172123_567971349","dateCreated":"2020-12-06T17:21:23+0100","dateStarted":"2021-01-01T20:24:34+0100","dateFinished":"2021-01-01T20:24:35+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11659"},{"title":"Generate the ARIMA models for each dish","text":"%python\nfrom pmdarima.arima import auto_arima\nmodels = list()\nfor dish in dishes:\n\n    dish = dish.reindex(index) # Add the generated daes and fill the Amount with 0 values.\n    dish = pd.merge(dish['amount'], dateinfo, left_index=True, right_index=True)\n    dish['amount'] = dish['amount'].fillna(0) # nan\n    dish.loc[~dish['designation'].isnull(),'designation'] = 1  # not nan\n    dish['designation'] = dish['designation'].fillna(0) # nan\n    exog = dish[['temperature', 'designation']].values  # exogenous variables\n    dish.index = pd.DatetimeIndex(dish.index.values,freq=dish.index.inferred_freq)\n    stepwise=auto_arima(dish['amount'], exogenous=exog, start_p=0, start_q=0, max_p=1,  # creation of the best suited ARIMA model \n                         max_q=1, d=0, trace=False, error_action='ignore', \n                         m=7, seasonal=True, suppress_warnings=True, stepwise=True,\n                         start_P=0, start_Q=0, max_P=1, max_Q=1)\n    models.append(stepwise)\n","user":"anonymous","dateUpdated":"2021-01-01T15:25:46+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python","title":true,"lineNumbers":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1607272404447_-1118876292","id":"20201206-173324_716730552","dateCreated":"2020-12-06T17:33:24+0100","dateStarted":"2021-01-01T20:24:35+0100","dateFinished":"2021-01-01T20:27:34+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11660"},{"title":"Store the models locally","text":"%python\nimport pickle\nfor i in range(len(models)):\n    filename = 'model'+str(i)+'.sav'\n    pickle.dump(models[i], open(filename, 'wb'))\n    ","user":"anonymous","dateUpdated":"2021-01-01T15:28:01+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python","title":true,"lineNumbers":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1607272423608_-663374466","id":"20201206-173343_722566268","dateCreated":"2020-12-06T17:33:43+0100","dateStarted":"2021-01-01T20:27:35+0100","dateFinished":"2021-01-01T20:27:35+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11661"},{"title":"Get Parameters for the next Week (to be used for prediction)","text":"%python\npredictionForecastDataRaw = spark.read.format(\"org.apache.spark.sql.insightedge\").option(\"collection\",\"com.devonfw.application.mtsj.predictionmanagement.dataaccess.api.PredictionForecastDataEntity\").load()\npredictionForecastData = predictionForecastDataRaw[\"temperature\",\"timestamp\",\"holiday\"].toPandas()\npredictionForecastData= predictionForecastData.sort_values(by=['timestamp'])\n\nprediction_exog = predictionForecastData[['temperature', 'holiday']].values\n\n ","user":"anonymous","dateUpdated":"2021-01-04T02:03:02+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python","title":true,"lineNumbers":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1607271696763_1663274793","id":"20201206-172136_1595229302","dateCreated":"2020-12-06T17:21:36+0100","dateStarted":"2021-01-01T20:27:35+0100","dateFinished":"2021-01-01T20:27:35+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11662"},{"title":"Apply the Models","text":"%python\nimport uuid\nforecast = []\ntimestamp = pd.Series(range(0,len(dishes)))\nfor i in range(len(dishes)):    \n    ids =[]\n    df = pd.DataFrame(models[i].predict(7,prediction_exog),columns=[\"forecast\"]) # Predict the values for the next 7 days, after current date.\n    for  j in range(len(dishes)):\n         ids.append(str(uuid.uuid4()))\n    df['id'] = ids\n    df['timestamp'] = timestamp\n    df['dishId'] = i\n    forecast.append(df)","user":"anonymous","dateUpdated":"2021-01-04T02:10:02+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python","title":true,"lineNumbers":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1607272433727_1516110299","id":"20201206-173353_549499846","dateCreated":"2020-12-06T17:33:53+0100","dateStarted":"2021-01-01T20:27:35+0100","dateFinished":"2021-01-01T20:27:35+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11663"},{"title":"Create schema to match the PredictionDayDataEntity from Space","text":"%python\ndf = pd.concat(forecast)\nfrom pyspark.sql.types import *\nschema = StructType([\n  StructField(\"forecast\", DoubleType(), True),\n  StructField(\"id\",StringType(),False),\n  StructField(\"timestamp\", IntegerType(), True),\n  StructField(\"dishId\", StringType(), True)]\n  )\ndf = spark.createDataFrame(df,schema)","user":"anonymous","dateUpdated":"2021-01-01T15:28:03+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python","title":true,"lineNumbers":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1607272444979_-1426135346","id":"20201206-173404_342511752","dateCreated":"2020-12-06T17:34:04+0100","dateStarted":"2021-01-01T20:27:35+0100","dateFinished":"2021-01-01T20:27:35+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11664"},{"title":"Store the results","text":"%python\ndf.write.format(\"org.apache.spark.sql.insightedge\").mode(\"overwrite\").save(\"com.devonfw.application.mtsj.predictionmanagement.dataaccess.api.PredictionDayDataEntity\")","user":"anonymous","dateUpdated":"2021-01-01T15:28:03+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python","title":true,"lineNumbers":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\r[Stage 53:>                                                         (0 + 4) / 4]\r                                                                                \r"}]},"apps":[],"jobName":"paragraph_1607272458511_468404695","id":"20201206-173418_1206953395","dateCreated":"2020-12-06T17:34:18+0100","dateStarted":"2021-01-01T20:27:35+0100","dateFinished":"2021-01-01T20:27:43+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11665"},{"text":"%python\n","user":"anonymous","dateUpdated":"2021-01-01T15:28:09+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1607275087038_2053868662","id":"20201206-181807_66656837","dateCreated":"2020-12-06T18:18:07+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11666"}],"name":"NextWeekPrediction-Generate ARIMA Models","id":"2FS9VRAJQ","noteParams":{},"noteForms":{},"angularObjects":{"python:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}